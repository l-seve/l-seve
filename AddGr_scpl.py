import csv
import unicodedata
from tkinter import Tk
from tkinter.filedialog import askopenfilename
import os

def normalize_string(s):
    """ Normalise une cha√Æne : suppression des accents, mise en minuscule et suppression des espaces inutiles. """
    return ''.join(c for c in unicodedata.normalize('NFD', s.lower().strip()) if unicodedata.category(c) != 'Mn')

def load_model_file(model_file_path):
    """ Charge le fichier mod√®le et cr√©e un dictionnaire {nom de groupe normalis√© : GroupId}. """
    model_data = {}
    with open(model_file_path, mode='r', encoding='utf-8-sig') as file:  # 'utf-8-sig' pour √©viter les probl√®mes d'encodage
        reader = csv.DictReader(file)
        
        # V√©rification des en-t√™tes
        print(f"En-t√™tes du fichier mod√®le : {reader.fieldnames}")
        if 'GroupName' not in reader.fieldnames or 'GroupId' not in reader.fieldnames:
            raise KeyError("Les en-t√™tes 'GroupName' et 'GroupId' doivent √™tre pr√©sents dans le fichier mod√®le.")

        for row in reader:
            group_name_normalized = normalize_string(row['GroupName'])
            model_data[group_name_normalized] = row['GroupId']
            print(f"Ajout√© dans le mod√®le : '{group_name_normalized}' -> '{row['GroupId']}'")

    return model_data

def update_target_file(target_file_path, model_data):
    """ Met √† jour le fichier cible en rempla√ßant les noms de groupe par les GroupId correspondants. """
    updated_rows = []
    
    with open(target_file_path, mode='r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        
        # V√©rification des en-t√™tes du fichier cible
        fieldnames = reader.fieldnames
        print(f"En-t√™tes du fichier cible : {fieldnames}")

        if 'groupe' not in fieldnames:
            raise KeyError("L'en-t√™te 'groupe' doit √™tre pr√©sent dans le fichier cible.")

        for row in reader:
            group_normalized = normalize_string(row['groupe'])
            print(f"Valeur normalis√©e du fichier cible : '{row['groupe']}' -> '{group_normalized}'")

            if group_normalized in model_data:
                print(f"‚úî Correspondance trouv√©e : {group_normalized} -> {model_data[group_normalized]}")
                row['groupe'] = model_data[group_normalized]
            else:
                print(f"‚ùå Aucune correspondance trouv√©e pour : {group_normalized}")

            # Ajout du pr√©fixe "agr-" si la valeur de groupe est num√©rique
            if row['groupe'].isdigit():
                row['groupe'] = f"agr-{row['groupe']}"
                print(f"üîπ Ajout du pr√©fixe : {row['groupe']}")

            updated_rows.append(row)

    # Cr√©ation du nouveau fichier avec "_mis_√†_jour"
    new_file_path = os.path.join(
        os.path.dirname(target_file_path),
        os.path.splitext(os.path.basename(target_file_path))[0] + '_mis_√†_jour.csv'
    )

    with open(new_file_path, mode='w', encoding='utf-8', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(updated_rows)

    print(f"‚úÖ Le fichier mis √† jour a √©t√© enregistr√© : {new_file_path}")

def main():
    """ Fonction principale permettant de s√©lectionner les fichiers et d'effectuer la mise √† jour. """
    Tk().withdraw()  # Cacher la fen√™tre Tkinter
    model_file_path = askopenfilename(title="S√©lectionnez le fichier mod√®le", filetypes=[("CSV files", "*.csv")])
    target_file_path = askopenfilename(title="S√©lectionnez le fichier cible", filetypes=[("CSV files", "*.csv")])

    if model_file_path and target_file_path:
        try:
            model_data = load_model_file(model_file_path)
            update_target_file(target_file_path, model_data)
        except KeyError as e:
            print(f"Erreur: {e}")
    else:
        print("‚ùå S√©lection de fichier annul√©e.")

if __name__ == "__main__":
    main()
